// <auto-generated />
using System;
using CarryDoggyGo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarryDoggyGo.Data.Migrations
{
    [DbContext(typeof(DbContextCarryDoggyGo))]
    [Migration("20210620000018_Add190621")]
    partial class Add190621
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarryDoggyGo.Entities.CareItem", b =>
                {
                    b.Property<int>("CareItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("care_item_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("CareItemId");

                    b.ToTable("care_item");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("CityId");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("DistrictId");

                    b.HasIndex("CityId");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.Dog", b =>
                {
                    b.Property<int>("DogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dog_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Diseases")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("diseases");

                    b.Property<int>("DogOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalInformation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("medical_information");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("race");

                    b.HasKey("DogId");

                    b.HasIndex("DogOwnerId");

                    b.ToTable("dogs");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogCareItem", b =>
                {
                    b.Property<int>("DogId")
                        .HasColumnType("int");

                    b.Property<int>("CareItemId")
                        .HasColumnType("int");

                    b.HasKey("DogId", "CareItemId");

                    b.HasIndex("CareItemId");

                    b.ToTable("dog_care_items");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogOwner", b =>
                {
                    b.Property<int>("DogOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dog_owner_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birthdate");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("phone");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("resgister_at");

                    b.HasKey("DogOwnerId");

                    b.HasIndex("DistrictId");

                    b.ToTable("dog_owners");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogOwnerNotification", b =>
                {
                    b.Property<int>("DogOwnerNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DogOwnerId")
                        .HasColumnType("int");

                    b.HasKey("DogOwnerNotificationId");

                    b.HasIndex("DogOwnerId");

                    b.ToTable("DogOwnerNotifications");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogWalk", b =>
                {
                    b.Property<int>("DogWalkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dog_walk_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("address");

                    b.Property<string>("AditionalInformation")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("aditional_information");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int>("DogWalkerId")
                        .HasColumnType("int");

                    b.Property<int>("Hours")
                        .HasColumnType("int")
                        .HasColumnName("hours");

                    b.Property<string>("PaymentAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payment_amount");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("QualificationId")
                        .HasColumnType("int");

                    b.Property<int>("state")
                        .HasColumnType("int");

                    b.HasKey("DogWalkId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DogWalkerId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("dog_walk");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogWalkDog", b =>
                {
                    b.Property<int>("DogId")
                        .HasColumnType("int")
                        .HasColumnName("dog_id");

                    b.Property<int>("DogWalkId")
                        .HasColumnType("int")
                        .HasColumnName("dog_walk_id");

                    b.HasKey("DogId", "DogWalkId");

                    b.HasIndex("DogWalkId");

                    b.ToTable("dog_walk_dog");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogWalkLocation", b =>
                {
                    b.Property<int>("DogWalkId")
                        .HasColumnType("int")
                        .HasColumnName("dogwalk_id");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_register");

                    b.HasKey("DogWalkId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("dogwalk_location");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogWalker", b =>
                {
                    b.Property<int>("DogWalkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dog_walker_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birthdate");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("password");

                    b.Property<int>("PaymentAmount")
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("payment_amount");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("phone");

                    b.Property<int>("Qualification")
                        .HasColumnType("int")
                        .HasColumnName("Qualification");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("resgister_at");

                    b.HasKey("DogWalkerId");

                    b.ToTable("dog_walkers");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogWalkerDistrict", b =>
                {
                    b.Property<int>("DogWalkerkId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.HasKey("DogWalkerkId", "DistrictId");

                    b.HasIndex("DistrictId");

                    b.ToTable("DogWalkerDistricts");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("address");

                    b.Property<int>("NumX")
                        .HasColumnType("int")
                        .HasColumnName("position_x");

                    b.Property<int>("NumY")
                        .HasColumnType("int")
                        .HasColumnName("position_y");

                    b.HasKey("LocationId");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DogWalkId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsImportant")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("MessageId");

                    b.HasIndex("DogWalkId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.NotificationDogWalker", b =>
                {
                    b.Property<int>("NotificationDogWalkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_dogwalker_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AcceptDeny")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("accept_deny")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<int>("DogWalkerId")
                        .HasColumnType("int")
                        .HasColumnName("dog_walker_id");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("shipping_date");

                    b.HasKey("NotificationDogWalkerId");

                    b.HasIndex("DogWalkerId");

                    b.ToTable("notification_dogwalker");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("PaymentTypeId");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.Qualification", b =>
                {
                    b.Property<int>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("qualification_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DogWalkId")
                        .HasColumnType("int");

                    b.Property<string>("Recomendations")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<int>("Starts")
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("starts");

                    b.HasKey("QualificationId");

                    b.HasIndex("DogWalkId")
                        .IsUnique();

                    b.ToTable("qualification");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("DogWalkId")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("DogWalkId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.District", b =>
                {
                    b.HasOne("CarryDoggyGo.Entities.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.Dog", b =>
                {
                    b.HasOne("CarryDoggyGo.Entities.DogOwner", "DogOwner")
                        .WithMany("Dogs")
                        .HasForeignKey("DogOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DogOwner");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogCareItem", b =>
                {
                    b.HasOne("CarryDoggyGo.Entities.CareItem", "CareItem")
                        .WithMany("DogCareItems")
                        .HasForeignKey("CareItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarryDoggyGo.Entities.Dog", "Dog")
                        .WithMany("DogCareItems")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareItem");

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogOwner", b =>
                {
                    b.HasOne("CarryDoggyGo.Entities.District", "District")
                        .WithMany("DogOwners")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogOwnerNotification", b =>
                {
                    b.HasOne("CarryDoggyGo.Entities.DogOwner", "DogOwner")
                        .WithMany("DogOwnerNotifications")
                        .HasForeignKey("DogOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DogOwner");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogWalk", b =>
                {
                    b.HasOne("CarryDoggyGo.Entities.District", "District")
                        .WithMany("DogWalks")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarryDoggyGo.Entities.DogWalker", "DogWalker")
                        .WithMany("DogWalks")
                        .HasForeignKey("DogWalkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarryDoggyGo.Entities.PaymentType", "PaymentType")
                        .WithMany("DogWalks")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("DogWalker");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogWalkDog", b =>
                {
                    b.HasOne("CarryDoggyGo.Entities.Dog", "Dog")
                        .WithMany("DogWalkDogs")
                        .HasForeignKey("DogId")
                        .HasConstraintName("FK_dog_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarryDoggyGo.Entities.DogWalk", "DogWalk")
                        .WithMany("DogWalkDogs")
                        .HasForeignKey("DogWalkId")
                        .HasConstraintName("FK_dog_walk_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dog");

                    b.Navigation("DogWalk");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogWalkLocation", b =>
                {
                    b.HasOne("CarryDoggyGo.Entities.DogWalk", "DogWalk")
                        .WithMany("DogWalkLocations")
                        .HasForeignKey("DogWalkId")
                        .HasConstraintName("FK_dogwalk_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarryDoggyGo.Entities.Location", "Location")
                        .WithMany("DogWalkLocations")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DogWalk");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogWalkerDistrict", b =>
                {
                    b.HasOne("CarryDoggyGo.Entities.District", "District")
                        .WithMany("DogWalkerDistricts")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarryDoggyGo.Entities.DogWalker", "DogWalker")
                        .WithMany("DogWalkerDistricts")
                        .HasForeignKey("DogWalkerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("DogWalker");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.Message", b =>
                {
                    b.HasOne("CarryDoggyGo.Entities.DogWalk", "DogWalk")
                        .WithMany("Messages")
                        .HasForeignKey("DogWalkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DogWalk");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.NotificationDogWalker", b =>
                {
                    b.HasOne("CarryDoggyGo.Entities.DogWalker", "DogWalker")
                        .WithMany("NotificationDogWalkers")
                        .HasForeignKey("DogWalkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DogWalker");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.Qualification", b =>
                {
                    b.HasOne("CarryDoggyGo.Entities.DogWalk", "DogWalk")
                        .WithOne("Qualification")
                        .HasForeignKey("CarryDoggyGo.Entities.Qualification", "DogWalkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DogWalk");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.Report", b =>
                {
                    b.HasOne("CarryDoggyGo.Entities.DogWalk", "DogWalk")
                        .WithMany("Reports")
                        .HasForeignKey("DogWalkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DogWalk");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.CareItem", b =>
                {
                    b.Navigation("DogCareItems");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.District", b =>
                {
                    b.Navigation("DogOwners");

                    b.Navigation("DogWalkerDistricts");

                    b.Navigation("DogWalks");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.Dog", b =>
                {
                    b.Navigation("DogCareItems");

                    b.Navigation("DogWalkDogs");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogOwner", b =>
                {
                    b.Navigation("DogOwnerNotifications");

                    b.Navigation("Dogs");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogWalk", b =>
                {
                    b.Navigation("DogWalkDogs");

                    b.Navigation("DogWalkLocations");

                    b.Navigation("Messages");

                    b.Navigation("Qualification");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.DogWalker", b =>
                {
                    b.Navigation("DogWalkerDistricts");

                    b.Navigation("DogWalks");

                    b.Navigation("NotificationDogWalkers");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.Location", b =>
                {
                    b.Navigation("DogWalkLocations");
                });

            modelBuilder.Entity("CarryDoggyGo.Entities.PaymentType", b =>
                {
                    b.Navigation("DogWalks");
                });
#pragma warning restore 612, 618
        }
    }
}
